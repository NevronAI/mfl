"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import grpc
import grpc.aio
import metisfl.proto.controller_pb2
import metisfl.proto.model_pb2
import metisfl.proto.service_common_pb2
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ControllerServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetHealthStatus: grpc.UnaryUnaryMultiCallable[
        metisfl.proto.service_common_pb2.Empty,
        metisfl.proto.service_common_pb2.Ack,
    ]
    SetInitialModel: grpc.UnaryUnaryMultiCallable[
        metisfl.proto.model_pb2.Model,
        metisfl.proto.service_common_pb2.Ack,
    ]
    JoinFederation: grpc.UnaryUnaryMultiCallable[
        metisfl.proto.controller_pb2.Learner,
        metisfl.proto.controller_pb2.LearnerId,
    ]
    LeaveFederation: grpc.UnaryUnaryMultiCallable[
        metisfl.proto.controller_pb2.LearnerId,
        metisfl.proto.service_common_pb2.Ack,
    ]
    StartTraining: grpc.UnaryUnaryMultiCallable[
        metisfl.proto.service_common_pb2.Empty,
        metisfl.proto.service_common_pb2.Ack,
    ]
    TrainDone: grpc.UnaryUnaryMultiCallable[
        metisfl.proto.controller_pb2.TrainDoneRequest,
        metisfl.proto.service_common_pb2.Ack,
    ]
    GetLogs: grpc.UnaryUnaryMultiCallable[
        metisfl.proto.service_common_pb2.Empty,
        metisfl.proto.controller_pb2.Logs,
    ]
    ShutDown: grpc.UnaryUnaryMultiCallable[
        metisfl.proto.service_common_pb2.Empty,
        metisfl.proto.service_common_pb2.Ack,
    ]

class ControllerServiceAsyncStub:
    GetHealthStatus: grpc.aio.UnaryUnaryMultiCallable[
        metisfl.proto.service_common_pb2.Empty,
        metisfl.proto.service_common_pb2.Ack,
    ]
    SetInitialModel: grpc.aio.UnaryUnaryMultiCallable[
        metisfl.proto.model_pb2.Model,
        metisfl.proto.service_common_pb2.Ack,
    ]
    JoinFederation: grpc.aio.UnaryUnaryMultiCallable[
        metisfl.proto.controller_pb2.Learner,
        metisfl.proto.controller_pb2.LearnerId,
    ]
    LeaveFederation: grpc.aio.UnaryUnaryMultiCallable[
        metisfl.proto.controller_pb2.LearnerId,
        metisfl.proto.service_common_pb2.Ack,
    ]
    StartTraining: grpc.aio.UnaryUnaryMultiCallable[
        metisfl.proto.service_common_pb2.Empty,
        metisfl.proto.service_common_pb2.Ack,
    ]
    TrainDone: grpc.aio.UnaryUnaryMultiCallable[
        metisfl.proto.controller_pb2.TrainDoneRequest,
        metisfl.proto.service_common_pb2.Ack,
    ]
    GetLogs: grpc.aio.UnaryUnaryMultiCallable[
        metisfl.proto.service_common_pb2.Empty,
        metisfl.proto.controller_pb2.Logs,
    ]
    ShutDown: grpc.aio.UnaryUnaryMultiCallable[
        metisfl.proto.service_common_pb2.Empty,
        metisfl.proto.service_common_pb2.Ack,
    ]

class ControllerServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetHealthStatus(
        self,
        request: metisfl.proto.service_common_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[metisfl.proto.service_common_pb2.Ack, collections.abc.Awaitable[metisfl.proto.service_common_pb2.Ack]]: ...
    @abc.abstractmethod
    def SetInitialModel(
        self,
        request: metisfl.proto.model_pb2.Model,
        context: _ServicerContext,
    ) -> typing.Union[metisfl.proto.service_common_pb2.Ack, collections.abc.Awaitable[metisfl.proto.service_common_pb2.Ack]]: ...
    @abc.abstractmethod
    def JoinFederation(
        self,
        request: metisfl.proto.controller_pb2.Learner,
        context: _ServicerContext,
    ) -> typing.Union[metisfl.proto.controller_pb2.LearnerId, collections.abc.Awaitable[metisfl.proto.controller_pb2.LearnerId]]: ...
    @abc.abstractmethod
    def LeaveFederation(
        self,
        request: metisfl.proto.controller_pb2.LearnerId,
        context: _ServicerContext,
    ) -> typing.Union[metisfl.proto.service_common_pb2.Ack, collections.abc.Awaitable[metisfl.proto.service_common_pb2.Ack]]: ...
    @abc.abstractmethod
    def StartTraining(
        self,
        request: metisfl.proto.service_common_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[metisfl.proto.service_common_pb2.Ack, collections.abc.Awaitable[metisfl.proto.service_common_pb2.Ack]]: ...
    @abc.abstractmethod
    def TrainDone(
        self,
        request: metisfl.proto.controller_pb2.TrainDoneRequest,
        context: _ServicerContext,
    ) -> typing.Union[metisfl.proto.service_common_pb2.Ack, collections.abc.Awaitable[metisfl.proto.service_common_pb2.Ack]]: ...
    @abc.abstractmethod
    def GetLogs(
        self,
        request: metisfl.proto.service_common_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[metisfl.proto.controller_pb2.Logs, collections.abc.Awaitable[metisfl.proto.controller_pb2.Logs]]: ...
    @abc.abstractmethod
    def ShutDown(
        self,
        request: metisfl.proto.service_common_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[metisfl.proto.service_common_pb2.Ack, collections.abc.Awaitable[metisfl.proto.service_common_pb2.Ack]]: ...

def add_ControllerServiceServicer_to_server(servicer: ControllerServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
